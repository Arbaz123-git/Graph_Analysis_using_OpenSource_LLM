import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn 
import streamlit as st 
from io import StringIO 

def load_and_preview_dataset(uploaded_file):
    """
    Load a dataset from a CSV or Excel file and display a preview.
    
    Parameters:
    file_path (str): The path to the dataset file. Can be a CSV OR Excel file.
    
    Returns:
    pd.DataFrame: Loaded dataset.
    
    """

    try:
        # check the file extension o determine if it's a CSV or Excel file
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith('.xlsx') or uploaded_file.name.endswith('.xls'):
            df = pd.read_excel(uploaded_file)
        else:
            raise ValueError('Unsupported file format. Please provide a CSV or Excel file. ')

        # Display the first few rows of the dataset

        st.write('Preview of the dataset: ')
        st.write(df.head())

        return df 
    except Exception as e:
        st.error(f"An error occured: {e}")
        return None 
# Function to generate graph analysis based on column data
def analyze_graphs(dataset, generated_prompts, sample_size=100):
    # Get numerical columns for scatter plots 
    numerical_columns = dataset.select_dtypes(include=['int64', 'float64']).columns
    for column in dataset.columns:
        # Sample data points to make visualization clearer 
        # Basic statistics for the column
        column_data = dataset[column].sample(n=min(sample_size, len(dataset)), random_state=42)
        st.write(f"###Analyzing column: {column}")

        # Check the data type of the column
        if column_data.dtype in ['int64', 'float64']:
            # If numerical, suggest a histogram and scatter plot
            prompt = generated_prompts['Histogram']
            st.write(f"**Suggested Graph Type:** Histogram")
            st.write(f"**Prompt:** {prompt}")

            # Histogram visualization 
            fig, ax = plt.subplots()
            column_data.hist(ax=ax)
            ax.set_title(f"Histogram of {column}")
            st.pyplot(fig)
            
        # Scatter Plot: if there are at least two numerical columns
            if len(numerical_columns) > 1:
                other_column = np.random.choice([col for col in numerical_columns if col != column])
                scatter_sample = dataset[[column, other_column]].sample(n=min(sample_size, len(dataset)), random_state=42)
                prompt = generated_prompts['Scatter Plot']
                st.write(f"**Suggested Graph Type:** Scatter Plot")
                st.write(f"**Prompt:** {prompt}")

                fig, ax = plt.subplots()
                ax.scatter(scatter_sample[column], scatter_sample[other_column])
                ax.set_title(f"Scatter Plot of {column} vs {other_column}")
                ax.set_xlabel(column)
                ax.set_ylabel(other_column)
                st.pyplot(fig)
            
            
        elif column_data.dtype == 'object':
          # If categorical, suggest a bar chart and pie chart
          prompt = generated_prompts['Bar Chart']
          st.write(f"**Suggested Graph Type:** Bar Chart")
          st.write(f"**Prompt:** {prompt}")

          fig, ax = plt.subplots()
          column_data.value_counts().head(sample_size).plot.bar(ax=ax)
          ax.set_title(f"Bar Chart of {column}")
          st.pyplot(fig)
                
          prompt = generated_prompts['Pie Chart']
          st.write(f"**Suggested Graph Type:** Pie Chart")
          st.write(f"**Prompt:** {prompt}")

          fig, ax = plt.subplots()
          column_data.value_counts().head(sample_size).plot.pie(autopct='%1.1f%%', ax=ax)
          ax.set_title(f"Pie Chart of {column}")
          st.pyplot(fig)
              
        elif column_data.dtype == 'datetime64[ns]':
          # If the column is datetime, suggest a line graph
          prompt = generated_prompts['Line Graph']
          st.write(f"**Suggested Graph Type:** Line Graph")
          st.write(f"**Prompt:** {prompt}")

          fig, ax = plt.subplots()
          dataset[column].sample(n=min(sample_size, len(dataset)), random_state=42).plot.line(ax=ax)
          ax.set_title(f"Line Graph of {column}")
          st.pyplot(fig)


# Call the analysis function
#analyze_graphs(dataset, generated_prompts, sample_size=25)

# prompt generated by myself and stored in a form of key: value pairs. 
generated_prompts = {
    "Bar Chart": "A bar chart is used to compare different categories.",
    "Line Graph": "A line graph is useful for showing trends over time.",
    "Pie Chart": "A pie chart displays the proportion of categories in a whole.",
    "Scatter Plot": "A scatter plot visualizes the relationship between two numerical variables.",
    "Histogram": "A histogram shows the distribution of numerical data."
}

# Main Streamlit App 
def main():
  st.title("Graph Analysis App")

  uploaded_file = st.file_uploader("Upload a CSV or Excel file", type=["csv","xlsx","xls"])

  if uploaded_file is not None:
    # Load and preview dataset 
    dataset = load_and_preview_dataset(uploaded_file)

    if dataset is not None:
      # Predefined graph prompts for different graph types 
      generated_prompts = {
          "Bar Chart": "A bar chart is used to compare different categories.",
          "Line Graph": "A line graph is useful for showing trends over time.",
          "Pie Chart": "A pie chart displays the proportion of categories in a whole.",
          "Scatter Plot": "A scatter plot visualizes the relationship between two numerical variables.",
          "Histogram": "A histogram shows the distribution of numerical data."
          
      }

      # Analyze and generate graphs based on dataset 
      analyze_graphs(dataset, generated_prompts, sample_size = 25)

if __name__ == '__main__':
  main()